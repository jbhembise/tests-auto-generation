buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}
plugins {
    id 'org.unbroken-dome.test-sets' version '2.1.1'
}

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

testSets {
    evosuiteTest
    randoopTest
    dspotTest
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Evosuite
    testImplementation group: 'org.evosuite', name: 'evosuite-master', version: "${evosuiteVersion}"
    testImplementation group: 'org.evosuite', name: 'evosuite-standalone-runtime', version: "${evosuiteVersion}"

    // JWalk
    testImplementation files('jwalk/JWalk11.jar')

    // Randoop
    testImplementation files('randoop/randoop-all-4.1.2.jar')

    // Dspot
    testImplementation files('dspot/dspot-2.1.1-jar-with-dependencies.jar')

    // Lombok
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    compile group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

    // JUnit framework
    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
}

task evosuiteClean {
    delete "${projectDir}/src/evosuiteTest/java"
}

task evosuite(dependsOn: ['assemble', 'evosuiteClean'], type: JavaExec) {
    classpath = sourceSets.test.compileClasspath
    main = 'org.evosuite.EvoSuite'
    args = [
            '-target', 'build/classes/java/main',
            '-D', 'test_dir=src/evosuiteTest/java'
    ]
    if (project.hasProperty('testclass')) {
        args('-class')
        args(testclass)
    }
}

task evosuiteHelp(dependsOn: 'assemble', type: JavaExec) {
    classpath = sourceSets.test.compileClasspath
    main = 'org.evosuite.EvoSuite'
    args = ['-help']
}

task randoopClean {
    delete "${projectDir}/src/randoopTest/java"
}

task randoop(dependsOn: ['assemble', 'randoopClean'], type: JavaExec) {
    classpath = sourceSets.test.compileClasspath
    main = 'randoop.main.Main'
    args = [
            'gentests',
            '--junit-output-dir', './src/randoopTest/java',
            '--checked-exception', 'ERROR',
            '--unchecked-exception', 'ERROR',
            '--specifications', './randoop/specifications.json',
            '--time-limit', '30'
    ]
    if (project.hasProperty('testclass')) {
        args('--testclass')
        args(testclass)
        args('--junit-package-name')
        args(testclass.substring(0, testclass.lastIndexOf(".")))
    }
}

task jwalkUI(dependsOn: 'assemble', type: JavaExec) {
    classpath = sourceSets.test.compileClasspath
    main = 'org.jwalk.tool.JWalkTester'
    workingDir = file("$buildDir/classes/java/main")
}

task jwalkCopyLicense(dependsOn: 'assemble', type: Copy) {
    from file("$projectDir/JWalkLicense.txt")
    into file("$buildDir/classes/java/main")
}

task jwalk(dependsOn: 'jwalkCopyLicense', type: JavaExec) {
    classpath = sourceSets.test.compileClasspath
    main = 'org.jwalk.tool.JWalkUtility'
    workingDir = file("$buildDir/classes/java/main")
    if (project.hasProperty('testclass')) {
        args(testclass)
        args('algebra')
        args('explore')
        args(3)
    }
}

task dspotClean {
    delete "${projectDir}/src/dspotTest/java"
}

task dspot(dependsOn: ['compileTestJava', 'dspotClean'], type: JavaExec) {
    classpath = sourceSets.test.compileClasspath
    main = 'eu.stamp_project.Main'
    args = [
            '-p', './dspot/dspot.properties',
            '--automatic-builder', 'GradleBuilder',
            '--descartes'
    ]
    if (project.hasProperty('testclass')) {
        args('-i')
        args(1)
        args('-t')
        args(testclass.substring(0, testclass.lastIndexOf(".")) + ".*")
        //args('-a')
        //args('MethodGeneratorAmplifier')
    }
}
