/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 17 14:55:31 GMT 2019
 */

package jbhembise.testauto.example3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jbhembise.testauto.example3.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Stack_ESTest extends Stack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack stack0 = new Stack();
      stack0.push("x2IC[ Wl?G$&DNZ]b");
      stack0.push("x2IC[ Wl?G$&DNZ]b");
      stack0.pop();
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack stack0 = new Stack();
      stack0.push("U&328Lpt,c");
      int int0 = stack0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack stack0 = new Stack();
      stack0.push((Object) null);
      Object object0 = stack0.last();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack stack0 = new Stack();
      stack0.push("U&328Lpt,c");
      Object object0 = stack0.last();
      assertEquals("U&328Lpt,c", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack stack0 = new Stack();
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      assertFalse(stack0.isFull());
      
      stack0.push("U&328Lpt,c");
      boolean boolean0 = stack0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack stack0 = new Stack();
      boolean boolean0 = stack0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack stack0 = new Stack();
      boolean boolean0 = stack0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack stack0 = new Stack();
      assertTrue(stack0.isEmpty());
      
      Object object0 = new Object();
      stack0.push(object0);
      boolean boolean0 = stack0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack stack0 = new Stack();
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not pop an element from an empty stack
         //
         verifyException("jbhembise.testauto.example3.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack stack0 = new Stack();
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      stack0.push("U&328Lpt,c");
      // Undeclared exception!
      try { 
        stack0.push("U&328Lpt,c");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not add more than 6 elements to the stack
         //
         verifyException("jbhembise.testauto.example3.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack stack0 = new Stack();
      stack0.clear();
      assertFalse(stack0.isFull());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack stack0 = new Stack();
      // Undeclared exception!
      try { 
        stack0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack stack0 = new Stack();
      int int0 = stack0.size();
      assertEquals(0, int0);
  }
}
